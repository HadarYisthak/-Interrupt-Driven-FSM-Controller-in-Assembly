#include  "bsp.h"

              MODULE HAL
              PUBLIC SysConfig,Print2LEDs,ClrLEDs,ReadSWs,PBs_handler,delay,x_cycles_PWM, delay_0_5_sec
              EXTERN GPIOconfig,TIMERconfig,ADCconfig
              EXTERN state
            
              RSEG   CODE
;--------------------------------------------------------------------
;             System Configuration  
;--------------------------------------------------------------------
SysConfig     call #GPIOconfig
              call #TIMERconfig
              call #ADCconfig
              ret
;--------------------------------------------------------------------
;Print LEDs - function only with argument (without return value)  
;--------------------------------------------------------------------
Print2LEDs    pop   R4        ; save return address
              pop   R5        ; get value to print
               
              mov.b R5,LEDsArrPort ;function body
              
              push.w  R4
              ret   
;--------------------------------------------------------------------
;Clear LEDs - void function (without arguments and return value)
;--------------------------------------------------------------------
ClrLEDs       clr.b LEDsArrPort
              ret                 
;--------------------------------------------------------------------
;Read SWs -  function, without arguments and return value
;--------------------------------------------------------------------
ReadSWs      pop     R4        ; save return address

             mov.b   PBsArrPort,R5 ;function body
             and.b   #SWmask,R5
             push.w  R5            ;function body end
             
             push.w  R4
             ret
;----------------------------------------------------------------------- 
;            PORT2 Interrupt Service Routine
;-----------------------------------------------------------------------
PBs_handler  push.w #debounceVal
             call   #delay    
             bit.b  #PB0,PBsArrIntPend   ;check if PB0 is pushed
             jnz    PB0sel 
             bit.b  #PB1,PBsArrIntPend   ;check if PB1 is pushed
             jnz    PB1sel
             bit.b  #PB2,PBsArrIntPend   ;check if PB2 is pushed
             jnz    PB2sel
             bit.b  #PB3,PBsArrIntPend   ;check if PB2 is pushed
             jnz    PB3sel
             reti                ; interrupt hapened from another source
             
PB0sel       mov    #1,state 
             mov    #PB0,R4     ; which IntPend to clear
             jmp    exitLPM0
PB1sel       mov    #2,state
             mov    #PB1,R4     ; which IntPend to clear
             jmp    exitLPM0
PB2sel       mov    #3,state    ; idle state
             mov    #PB2,R4     ; which IntPend to clear
             jmp    exitLPM0
PB3sel       mov    #0,state    ; idle state
             mov    #PB3,R4     ; which IntPend to clear


exitLPM0     bic    #CPUOFF,0(SP)  ; Exit LMP0
             bic.b  R4,PBsArrIntPend  
             reti
;----------------------------------------------------------------------------------------------
;            Polling based Delay function
;----------------------------------------------------------------------------------------------                     
delay        pop   R4        ; save return address
             pop   R5        ; get delay value
             
L            dec.w   R5      ;function body begin                 
             jnz     L       ;function body end
             
             push.w  R4
             ret
;----------------------------------------------------------------------------------------------

delay_0_5_sec
             mov #2, R10
L1           push #delay62_5ms
             call #delay
             dec.w   R10 
             jnz     L1
             ret

x_cycles_PWM
             pop R11  // pc
             pop R12  // num of 1 per cycle
             pop R8  // num of 0 per cycle
             pop R9  // num of cycles
             
             //  THIS IS THE 1 KHZ FREQUENCY 1 ms (1/1000) SECONDS 
             // (delay) = (12+3*x)
             // A + B = (2^20)/freq
             // A = percentage_1 * (A+B)
             // B = percentage_0 * (A+B)
             // A = (PUSH) + (delay1) + (BIC)
             // A = 3 + 12 + 3 * x_1 + 5 = 20 + 3 * x_1
             // B = (PUSH) + (delay2) + (dec) + (jnz) + (bis)
             // B = 3 + 12 + 3 * x_2 + 1 + 2 + 5 = 23 + 3 * x_2
             // X1 = (A - 20)/3
             // X2 = (B - 23)/3
             
             // For 1Khz x_1 = 168  x_2 = 167
             // For 2Khz x_1 = 80.7  x_2 = 79.7

loop          bis.b   #0x80, PWMPort // 1(ON) TO P2.7
              push    R12    //  
              call    #delay //3x+12
              bic.b   #0x80, PWMPort 
              push    R8                  
              call    #delay
              dec     R9
              jnz     loop
              
              push.w  R11
              ret 
              
             ENDMOD
             END


 